#include <unistd.h>
#include <iostream>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <ctime>


using namespace std;

  int randomNum()
{
        int x;
        srand(time(0));
        x = (rand() % 10) + 1;
        return x;
}

int main(int argc, char **argv)
{
    if(argc != 3){
        cout<<"Useage ./inbet <messagePortToClient> <messagePortToServer> "<<endl;
        exit(0);
    }
    int sockfd = socket(PF_INET, SOCK_DGRAM, 0);
        struct sockaddr_in servaddr;
         bzero(&servaddr, sizeof(servaddr));
         servaddr.sin_family = AF_INET;
         servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
         servaddr.sin_port = htons(atoi(argv[1]));
    int sockfd2= socket(AF_INET, SOCK_DGRAM, 0);
        struct sockaddr_in servaddr2;
        memset(&servaddr2, 0, sizeof(servaddr2));
        servaddr2.sin_family = AF_INET;
        servaddr2.sin_addr.s_addr = htonl(INADDR_ANY);
        servaddr2.sin_port = htons(atoi(argv[2]));

    bind(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)); // Client message
    bind(sockfd2, (struct sockaddr *)&servaddr2, sizeof(servaddr2)); // Server Message

    char recvline[1024], sendline[1024], crcline[50];

    cout<<"Wating... " << endl;
        char n = 'a';
        int proNum = 0;
    while(1)
    {
        if(n = 'a')
        {                       //store message in message variable
                memset(recvline,0,1024);
                recvfrom(sockfd, recvline, 1024, 0, NULL, NULL);
                for (int i = 0; i < strlen(recvline); i++ )
                        {
                         crcline[i] = recvline[i];
                        }
                cout << "crcline message holds " << crcline << endl;
                sendto(sockfd2,crcline, strlen(crcline), 0, (struct sockaddr *)&servaddr2, sizeof(servaddr2));
                bzero(crcline, sizeof(crcline));
                if(strcmp(sendline,"bye") == 0)
                {
                        break;
                }
                n = 'b';
        }
        if(n = 'b')
        {
                memset(recvline,0,1024);
                recvfrom(sockfd, recvline, 1024, 0, NULL, NULL);
                for (int i = 0; i < strlen(recvline); i++ )
                        {
                         sendline[i] = recvline[i];
                        }
                cout << "sendline message holds " << sendline << endl;
                proNum = randomNum();
                cout << "Error number for message is " << proNum << endl;
                if(proNum < 5 )
                {
                        sendline[0] = 'B'; sendline[1] = 'U'; sendline[2] = 'G';
                        cout << sendline << endl;

                }
                sendto(sockfd2, sendline, strlen(sendline), 0, (struct sockaddr *)&servaddr2, sizeof(servaddr2));
                bzero(sendline, sizeof(sendline));
                if(strcmp(recvline,"bye") == 0)
                {
                break;
                }
                n = 'a';
                }
    }
    close(sockfd); // end of server side of app
    close(sockfd2);
}